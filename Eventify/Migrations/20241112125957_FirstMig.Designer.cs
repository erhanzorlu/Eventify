// <auto-generated />
using System;
using Eventify.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eventify.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241112125957_FirstMig")]
    partial class FirstMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eventify.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Sanat ve Kültür"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Eğitim ve Gelişim"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Spor ve Sağlık"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Sosyal ve Eğlence"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Çocuk ve Aile"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Çevre ve Doğa"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Tasarım ve Yaratıcılık"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Teknoloji ve Bilim"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Gönüllülük ve Sosyal Sorumluluk"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Gastronomi"
                        });
                });

            modelBuilder.Entity("Eventify.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int?>("AgeLimit")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GenderRestriction")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CategoryId = 1,
                            City = "İstanbul",
                            Description = "açıklama",
                            District = "Fatih",
                            EndDate = new DateTime(2024, 11, 12, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFree = false,
                            Latitude = 4100922481235155.0,
                            Location = "Fatih",
                            Longitude = 28969144821166996.0,
                            MaxParticipants = 24,
                            Name = "Fatih",
                            StartDate = new DateTime(2024, 11, 12, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 2,
                            CategoryId = 2,
                            City = "İstanbul",
                            Description = "Kadıköy etkinliği açıklaması",
                            District = "Kadıköy",
                            EndDate = new DateTime(2024, 11, 13, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFree = false,
                            Latitude = 40989045960875176.0,
                            Location = "Kadıköy",
                            Longitude = 29024591445922856.0,
                            MaxParticipants = 30,
                            Name = "Kadıköy",
                            StartDate = new DateTime(2024, 11, 13, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 3,
                            CategoryId = 3,
                            City = "İstanbul",
                            Description = "Beşiktaş etkinliği açıklaması",
                            District = "Beşiktaş",
                            EndDate = new DateTime(2024, 11, 14, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFree = false,
                            Latitude = 41040932869206168.0,
                            Location = "Beşiktaş",
                            Longitude = 29000301361083988.0,
                            MaxParticipants = 20,
                            Name = "Beşiktaş",
                            StartDate = new DateTime(2024, 11, 14, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Eventify.Models.EventTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 1,
                            TagId = 2
                        },
                        new
                        {
                            Id = 3,
                            EventId = 1,
                            TagId = 3
                        },
                        new
                        {
                            Id = 4,
                            EventId = 1,
                            TagId = 4
                        },
                        new
                        {
                            Id = 5,
                            EventId = 1,
                            TagId = 6
                        },
                        new
                        {
                            Id = 6,
                            EventId = 1,
                            TagId = 12
                        },
                        new
                        {
                            Id = 7,
                            EventId = 2,
                            TagId = 3
                        },
                        new
                        {
                            Id = 8,
                            EventId = 2,
                            TagId = 7
                        },
                        new
                        {
                            Id = 9,
                            EventId = 2,
                            TagId = 9
                        },
                        new
                        {
                            Id = 10,
                            EventId = 2,
                            TagId = 12
                        },
                        new
                        {
                            Id = 11,
                            EventId = 2,
                            TagId = 15
                        },
                        new
                        {
                            Id = 12,
                            EventId = 2,
                            TagId = 17
                        },
                        new
                        {
                            Id = 13,
                            EventId = 3,
                            TagId = 32
                        },
                        new
                        {
                            Id = 14,
                            EventId = 3,
                            TagId = 33
                        },
                        new
                        {
                            Id = 15,
                            EventId = 3,
                            TagId = 34
                        },
                        new
                        {
                            Id = 16,
                            EventId = 3,
                            TagId = 35
                        },
                        new
                        {
                            Id = 17,
                            EventId = 3,
                            TagId = 50
                        },
                        new
                        {
                            Id = 18,
                            EventId = 3,
                            TagId = 53
                        });
                });

            modelBuilder.Entity("Eventify.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Name = "Tiyatro"
                        },
                        new
                        {
                            TagId = 2,
                            Name = "Sergi"
                        },
                        new
                        {
                            TagId = 3,
                            Name = "Müzik ve Konser"
                        },
                        new
                        {
                            TagId = 4,
                            Name = "Sinema ve Film Gösterimi"
                        },
                        new
                        {
                            TagId = 5,
                            Name = "Edebiyat ve Kitap"
                        },
                        new
                        {
                            TagId = 6,
                            Name = "Tarih ve Arkeoloji"
                        },
                        new
                        {
                            TagId = 7,
                            Name = "Workshop (Atölye Çalışmaları)"
                        },
                        new
                        {
                            TagId = 8,
                            Name = "Seminer ve Konferans"
                        },
                        new
                        {
                            TagId = 9,
                            Name = "Kişisel Gelişim"
                        },
                        new
                        {
                            TagId = 10,
                            Name = "Dil Kursları"
                        },
                        new
                        {
                            TagId = 11,
                            Name = "Kariyer ve İş Dünyası"
                        },
                        new
                        {
                            TagId = 12,
                            Name = "Bilim ve Teknoloji"
                        },
                        new
                        {
                            TagId = 13,
                            Name = "Spor Müsabakaları"
                        },
                        new
                        {
                            TagId = 14,
                            Name = "Fitness ve Egzersiz"
                        },
                        new
                        {
                            TagId = 15,
                            Name = "Yoga ve Meditasyon"
                        },
                        new
                        {
                            TagId = 16,
                            Name = "Doğa Yürüyüşleri"
                        },
                        new
                        {
                            TagId = 17,
                            Name = "Bisiklet Turları"
                        },
                        new
                        {
                            TagId = 18,
                            Name = "Sağlıklı Yaşam Seminerleri"
                        },
                        new
                        {
                            TagId = 19,
                            Name = "Parti ve Gece Hayatı"
                        },
                        new
                        {
                            TagId = 20,
                            Name = "Stand-up ve Komedi Gösterisi"
                        },
                        new
                        {
                            TagId = 21,
                            Name = "Festivaller"
                        },
                        new
                        {
                            TagId = 22,
                            Name = "Yemek ve Tatma Etkinlikleri"
                        },
                        new
                        {
                            TagId = 23,
                            Name = "Dans ve Performans Sanatları"
                        },
                        new
                        {
                            TagId = 24,
                            Name = "Oyun Geceleri"
                        },
                        new
                        {
                            TagId = 25,
                            Name = "Çocuk Tiyatroları"
                        },
                        new
                        {
                            TagId = 26,
                            Name = "Aile Etkinlikleri"
                        },
                        new
                        {
                            TagId = 27,
                            Name = "Çocuk Atölyeleri"
                        },
                        new
                        {
                            TagId = 28,
                            Name = "Eğitim Etkinlikleri"
                        },
                        new
                        {
                            TagId = 29,
                            Name = "Hayvanat Bahçesi ve Akvaryum Ziyaretleri"
                        },
                        new
                        {
                            TagId = 30,
                            Name = "Ekolojik Etkinlikler"
                        },
                        new
                        {
                            TagId = 31,
                            Name = "Doğa Gözlemleri"
                        },
                        new
                        {
                            TagId = 32,
                            Name = "Çevre Temizliği ve Gönüllülük"
                        },
                        new
                        {
                            TagId = 33,
                            Name = "Çiftlik ve Organik Tarım Gezileri"
                        },
                        new
                        {
                            TagId = 34,
                            Name = "Kamp ve Dağcılık"
                        },
                        new
                        {
                            TagId = 35,
                            Name = "El Sanatları"
                        },
                        new
                        {
                            TagId = 36,
                            Name = "Dijital Sanat ve Medya"
                        },
                        new
                        {
                            TagId = 37,
                            Name = "Fotoğrafçılık"
                        },
                        new
                        {
                            TagId = 38,
                            Name = "Resim ve Heykel"
                        },
                        new
                        {
                            TagId = 39,
                            Name = "Moda ve Stil"
                        },
                        new
                        {
                            TagId = 40,
                            Name = "Grafik Tasarım"
                        },
                        new
                        {
                            TagId = 41,
                            Name = "Yapay Zeka ve Makine Öğrenimi"
                        },
                        new
                        {
                            TagId = 42,
                            Name = "Yazılım ve Kodlama"
                        },
                        new
                        {
                            TagId = 43,
                            Name = "Girişimcilik ve Startup"
                        },
                        new
                        {
                            TagId = 44,
                            Name = "İnovasyon ve Ar-Ge"
                        },
                        new
                        {
                            TagId = 45,
                            Name = "Bilim Fuarları ve Sergiler"
                        },
                        new
                        {
                            TagId = 46,
                            Name = "Elektronik ve Robotik"
                        },
                        new
                        {
                            TagId = 47,
                            Name = "Sosyal Yardım Etkinlikleri"
                        },
                        new
                        {
                            TagId = 48,
                            Name = "Çocuk Destek Programları"
                        },
                        new
                        {
                            TagId = 49,
                            Name = "Yaşlılara Yardım Etkinlikleri"
                        },
                        new
                        {
                            TagId = 50,
                            Name = "Çevre Temizliği ve Doğa Koruma"
                        },
                        new
                        {
                            TagId = 51,
                            Name = "Gıda Bağış ve Toplama Etkinlikleri"
                        },
                        new
                        {
                            TagId = 52,
                            Name = "Yemek Atölyeleri"
                        },
                        new
                        {
                            TagId = 53,
                            Name = "Şarap Tadımı"
                        },
                        new
                        {
                            TagId = 54,
                            Name = "Kahve ve Çikolata Etkinlikleri"
                        },
                        new
                        {
                            TagId = 55,
                            Name = "Yerel Lezzet Turları"
                        },
                        new
                        {
                            TagId = 56,
                            Name = "Vegan ve Sağlıklı Yemek Etkinlikleri"
                        },
                        new
                        {
                            TagId = 57,
                            Name = "Mutfak Kültürü Seminerleri"
                        });
                });

            modelBuilder.Entity("Eventify.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5fd1dfba-c0f1-402a-ae7a-821fca498529"),
                            CreatedAt = new DateTime(2024, 11, 12, 15, 59, 55, 711, DateTimeKind.Local).AddTicks(561),
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@example.com",
                            FirstName = "Ayşe",
                            Gender = 1,
                            LastName = "Yılmaz",
                            Latitude = 41.07506311536477,
                            Longitude = 29.003208846053397,
                            Password = "sifre123",
                            UserName = "kullanici123"
                        },
                        new
                        {
                            UserId = new Guid("5bac23ea-d303-44cb-b859-c25285bf0b47"),
                            CreatedAt = new DateTime(2024, 11, 12, 15, 59, 55, 711, DateTimeKind.Local).AddTicks(620),
                            DateOfBirth = new DateTime(1985, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.kaya@example.com",
                            FirstName = "Mehmet",
                            Gender = 2,
                            LastName = "Kaya",
                            Latitude = 40.981988897895867,
                            Longitude = 29.060479357673827,
                            Password = "sifre456",
                            UserName = "kullanici456"
                        },
                        new
                        {
                            UserId = new Guid("36e3deff-9244-4cfb-b883-790964e88e55"),
                            CreatedAt = new DateTime(2024, 11, 12, 15, 59, 55, 711, DateTimeKind.Local).AddTicks(629),
                            DateOfBirth = new DateTime(1992, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elif.demir@example.com",
                            FirstName = "Elif",
                            Gender = 1,
                            LastName = "Demir",
                            Latitude = 41.051385141155201,
                            Longitude = 28.920015114165274,
                            Password = "sifre789",
                            UserName = "kullanici789"
                        });
                });

            modelBuilder.Entity("Eventify.Models.UserCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("Eventify.Models.UserEvent", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvents");
                });

            modelBuilder.Entity("Eventify.Models.UserTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("Eventify.Models.Event", b =>
                {
                    b.HasOne("Eventify.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Eventify.Models.EventTag", b =>
                {
                    b.HasOne("Eventify.Models.Event", "Event")
                        .WithMany("EventTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventify.Models.Tag", "Tag")
                        .WithMany("EventTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Eventify.Models.UserCategory", b =>
                {
                    b.HasOne("Eventify.Models.Category", "Category")
                        .WithMany("UserCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventify.Models.User", "User")
                        .WithMany("UserCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventify.Models.UserEvent", b =>
                {
                    b.HasOne("Eventify.Models.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventify.Models.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventify.Models.UserTag", b =>
                {
                    b.HasOne("Eventify.Models.Tag", "Tag")
                        .WithMany("UserTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventify.Models.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventify.Models.Category", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("UserCategories");
                });

            modelBuilder.Entity("Eventify.Models.Event", b =>
                {
                    b.Navigation("EventTags");

                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("Eventify.Models.Tag", b =>
                {
                    b.Navigation("EventTags");

                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("Eventify.Models.User", b =>
                {
                    b.Navigation("UserCategories");

                    b.Navigation("UserEvents");

                    b.Navigation("UserTags");
                });
#pragma warning restore 612, 618
        }
    }
}
